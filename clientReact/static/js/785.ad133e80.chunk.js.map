{"version":3,"file":"static/js/785.ad133e80.chunk.js","mappings":"0KAiBAA,QAAQC,IAAI,iCAEL,MAAMC,EA8BTC,WAAAA,CAAWC,GAAsF,IAArF,OAAEC,EAAM,YAAEC,GAAwEF,EAyC1F,GAzC0F,KA7B9FE,iBAAW,OACXC,oBAAc,OAEdC,oBAAc,OACdC,aAAO,OACPC,UAAI,OACJC,qBAAe,OACfC,kBAAY,OACZC,mBAAa,OACbC,WAAK,OAELC,kBAAY,OAEZV,YAAM,OAENW,yBAAmB,OACnBC,yBAAmB,OAEnBC,eAAS,OACTC,iBAAW,OACXC,cAAQ,OACRC,gBAAU,OACVC,kBAAY,OACZC,aAAO,OAEPC,iBAAW,OAEXC,WAAK,EAGDC,OAAOC,MAAQC,KAEfA,KAAKtB,YAAyB,OAAXA,QAAW,IAAXA,OAAW,EAAXA,EAAaA,YAChCsB,KAAKrB,eAA4B,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAaC,eAEnCqB,KAAKpB,gBAAiB,EACtBoB,KAAKnB,QAAU,GACfmB,KAAKlB,KAAO,CAAC,QAAS,IACtBkB,KAAKjB,gBAAkB,CAAC,EACxBiB,KAAKhB,aAAe,GACpBgB,KAAKf,eAAgB,EACrBe,KAAKd,MAAQ,CACTe,MAAO,GACPC,MAAO,IAGXF,KAAKb,aAAe,KAEpBa,KAAKvB,OAASA,GAAU,CAAC,EAEzBuB,KAAKV,UAAYa,SAASC,cAAc,cACxCJ,KAAKT,YAAcY,SAASC,cAAc,YAC1CJ,KAAKR,SAAWW,SAASC,cAAc,aACvCJ,KAAKP,WAAaU,SAASC,cAAc,eACzCJ,KAAKN,aAAeS,SAASC,cAAc,UAC3CJ,KAAKL,QAAUQ,SAASE,iBAAiB,IAAML,KAAKvB,OAAO6B,QAE3DN,KAAKJ,YAAc,CACfK,MAAO,UACPC,MAAO,WAEXF,KAAKJ,YAAYK,MAAQD,KAAKtB,YAAY6B,SAE1CP,KAAKlB,KAAK,GAAKkB,KAAKJ,YAAYI,KAAKlB,KAAK,IAC1CkB,KAAKQ,aAELR,KAAKZ,oBAAsBY,KAAKS,oBAAoB,SACpDT,KAAKX,oBAAsBW,KAAKS,oBAAoB,UAG/CT,KAAKV,UACN,MAAM,IAAIoB,MAAM,kQAEpBV,KAAKH,MAAQc,MAAMC,KAAKZ,KAAKV,UAAUe,iBAAiB,mBAExDL,KAAKa,WACT,CAEOC,gBAAAA,CAAiBC,GAEpB,OADef,KAAKnB,QAAQmC,MAAKC,GAAUA,EAAOF,OAASA,GAE/D,CAEAG,eAAAA,CAAgBC,EAAcC,GAC1BD,EAAaE,SAAQC,IAAoB,IAAlBC,EAAMC,GAAMF,EAC/BtB,KAAKZ,oBAAoBmC,EAAMC,EAAM,IAEzCJ,EAAaC,SAAQI,IAAoB,IAAlBF,EAAMC,GAAMC,EAC/BzB,KAAKX,oBAAoBkC,EAAMC,EAAM,GAE7C,CAEOE,UAAAA,GACH1B,KAAK2B,cAEL3B,KAAK4B,eACL5B,KAAK6B,iBACL7B,KAAK8B,UAAUX,EAAAA,EAAcC,EAAAA,EACjC,CAEQP,SAAAA,GAAa,IAADkB,EAChB,IAAIC,EAAQ,EACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACnBlC,KAAKH,MAAMmC,GAAOG,QAAQC,SAAWC,EAAAA,EAAQH,GAAKD,EAClDD,IAI4B,QAApCD,EAAA5B,SAASmC,eAAe,oBAAY,IAAAP,GAApCA,EAAsCQ,iBAAiB,SAAUC,IAC7D,MAAMC,EAAWD,EAAEE,OAAOC,QAAQ,IAAM3C,KAAKvB,OAAOmE,eAC9C7B,EAAgB,OAAR0B,QAAQ,IAARA,OAAQ,EAARA,EAAUN,QAAQC,SAC1BnB,EAASjB,KAAKb,aAEpB,IAAK4B,IAAUE,EAAQ,OAEvB,MAAM4B,EAAO5B,EAAO6B,MAAM9B,MAAK6B,GAAQA,EAAY,QAAM9B,IACzD,GAAI8B,GAAQ5B,EAAO8B,UAAY/C,KAAKnB,QAAQmE,SAAS/B,KAC/B,SAAd4B,EAAKtB,MAAiC,aAAdsB,EAAKtB,MAAqB,CAClD,GAAkB,aAAdsB,EAAKtB,KAAqB,CAC1B,MAAM0B,EAA+B,MAAblC,EAAM,GACxBmC,EAAuB,UAAjBjC,EAAOkC,MAAoB,EAAI,EAC3C,IAAKC,EAAQC,GAAaJ,EAAkB,CAAC,IAAK,KAAO,CAAC,IAAK,KAC/D,MAAMK,EAAYF,EAASF,EACrBK,EAAcvD,KAAKnB,QAAQmC,MAAKwC,GAAOA,EAAIzC,QAAUuC,IAAcE,EAAIC,WAC7E,IAAKF,EAAa,OAClBA,EAAY/B,MAAM6B,EAAYH,EAClC,CACAjC,EAAOO,MAAMT,GACbE,EAAOA,OAAOyC,UAAUC,OAAO,UAC/B1C,EAAO8B,UAAW,EAClB/C,KAAKb,aAAe,KAEpBa,KAAKQ,aACLR,KAAKV,UAAUsE,oBAAoB,QAASf,EAChD,CACJ,IAGJ7C,KAAK6D,yBACT,CAEOC,YAAAA,GACH1F,QAAQC,IAAI,mBACZ2B,KAAK2B,cACL3B,KAAK4B,eACL5B,KAAK6B,iBACL7B,KAAK+D,kBAET,CAEAC,uBAAAA,GACI,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAQjE,SAASkE,cAAc,OAErCD,EAAMV,UAAUY,IAAItE,KAAKvB,OAAO8F,cAChCH,EAAMI,UAAY,uHAEJxE,KAAKvB,OAAOgG,6CACZzE,KAAKvB,OAAOiG,UAAU1E,KAAKvB,OAAOkG,sCAA4B3E,KAAKvB,OAAOmG,SAAS5E,KAAKvB,OAAOkG,kEAG7G,MAAMD,EAASN,EAAMhE,cAAc,IAAMJ,KAAKvB,OAAOiG,QAC/CE,EAAQR,EAAMhE,cAAc,IAAMJ,KAAKvB,OAAOmG,OAEpDzE,SAAS0E,KAAKC,OAAOV,GAErBM,GAAUA,EAAOnC,iBAAiB,SAAS,KACvC2B,GAAQ,GACRE,EAAMT,QAAQ,IAElBiB,GAASA,EAAMrC,iBAAiB,SAAS,KACrC2B,GAAQ,GACRE,EAAMT,QAAQ,GAChB,GAEV,CAEAoB,oBAAAA,GACI,GAAI/E,KAAKL,QAAS,IAAK,IAAIW,KAAUN,KAAKL,QAAS,CAC/C,MAAMqF,EAAY1E,EAAOF,cAAc,iBACjC6E,EAAqC3E,EAAOF,cAAc,cAC1D8E,EAAU5E,EAAOF,cAAc,SAE/B+E,EAAY7E,EAAOF,cAAc,cACjCgF,EAAU9E,EAAOF,cAAc,YAErC,SAASiF,IACLL,GAAaA,EAAUtB,UAAUC,OAAO3D,KAAKvB,OAAO6G,MACpDL,GAAaA,EAAUvB,UAAUY,IAAItE,KAAKvB,OAAO6G,MACjDH,GAAaA,EAAUzB,UAAUY,IAAItE,KAAKvB,OAAO6G,MACjDF,GAAWA,EAAQ1B,UAAUY,IAAItE,KAAKvB,OAAO6G,MACzCL,IAAWA,EAAUM,MAAQ,GACrC,CAEIP,GAAWA,EAAUzC,iBAAiB,SAAS,KAC/CyC,EAAUtB,UAAUY,IAAItE,KAAKvB,OAAO6G,MACpCL,GAAaA,EAAUvB,UAAUC,OAAO3D,KAAKvB,OAAO6G,MACpDH,GAAaA,EAAUzB,UAAUC,OAAO3D,KAAKvB,OAAO6G,MACpDF,GAAWA,EAAQ1B,UAAUC,OAAO3D,KAAKvB,OAAO6G,MAChDH,GAAaA,EAAU5C,iBAAiB,SAAS,KACzC0C,GAAaA,EAAUM,MAAMC,OAAS,IAClCN,IAASA,EAAQO,YAAcR,EAAUM,OAC7CvF,KAAKJ,YAAYU,EAAOoD,UAAU,IAAMuB,EAAUM,MAClDF,EAAKK,KAAK1F,KAAVqF,GACJ,IAEAD,GAASA,EAAQ7C,iBAAiB,QAAS8C,EAAKK,KAAK1F,MAAM,GAEvE,CACJ,CAEA2F,UAAAA,GACI,IAAK,IAAIrF,KAAUN,KAAKL,QAAS,CAC7B,MAAMuF,EAAU5E,EAAOF,cAAc,SACjC8E,IAASA,EAAQO,YAAc,GACvC,CACJ,CAEA5D,cAAAA,GACI,IAAK,IAAIvB,KAAUN,KAAKL,QAAS,CAC7B,MAAMwD,EAAQ7C,EAAOoD,UAAU,GAAGkC,MAAM,KAAK,GACvCV,EAAU5E,EAAOF,cAAc,SACjC8E,IAASA,EAAQO,YAAczF,KAAKJ,YAAYuD,IACpD,MAAMjE,EAAQoB,EAAOF,cAAc,UAC/BlB,IAAOA,EAAMuG,YAAczF,KAAKd,MAAMiE,GAE9C,CACJ,CAEAU,uBAAAA,GACI7D,KAAKP,YAAcO,KAAKP,WAAW8C,iBAAiB,SAAS,KACzDvC,KAAKgE,0BAA0B6B,MAC3BC,IACQA,GAAa9F,KAAK8B,UAAUX,EAAAA,EAAcC,EAAAA,EAAa,GAElE,GAET,CAEA2E,qBAAAA,GACI,GAAI/F,KAAKN,aAAc,IAAK,IAAIsG,KAAWhG,KAAKN,aAAaW,iBAAiB,KAAiB,QAAd4F,EAAGjG,KAAKvB,cAAM,IAAAwH,OAAA,EAAXA,EAAaC,OAAO,CAAC,IAADD,EAAAE,EACpG,IAAKH,EAAS,OACd,MAAMI,EAAKJ,EAAQ5F,cAAc,IAAMJ,KAAKvB,OAAO2H,IAAKX,YAClDS,EAAOlG,KAAKqG,2BAA2BrF,MAAKkF,GAAQA,EAAKE,IAAMA,IACrEJ,EAAQzD,iBAAiB,SAAS,KAC9BvC,KAAKgE,0BAA0B6B,MAC3BC,IACI,GAAIA,EAAa,CAAC,IAADQ,EAAAC,EACb,GAAIP,EAAQtC,UAAU8C,SAA8B,QAAtBF,EAAY,QAAZC,EAACvG,KAAKvB,cAAM,IAAA8H,OAAA,EAAXA,EAAaE,gBAAQ,IAAAH,EAAAA,EAAI,YAAa,CACjE,MAAMI,EAAU,CACZvF,aAAY,IACZC,aAAY,IACZpC,aAAckH,EAAKlH,cAKvB,OAHA2H,OAAO5C,mBACP4C,OAAS,IAAIC,EAAAA,EAAOF,EAAQ1H,aAAc0H,EAAQvF,aAAcuF,EAAQtF,aAAcpB,KAAKvB,aAC3FkI,OAAOE,aAEX,CACIT,GAAIpG,KAAK8G,qBAAqBV,EACtC,IAEP,IAEiD,QAAtDD,EAAAH,EAAQ5F,cAAc,IAAMJ,KAAKvB,OAAOsI,sBAAc,IAAAZ,GAAtDA,EAAwD5D,iBAAiB,SAAUyE,IAC/EA,EAAMC,kBACNjH,KAAKgE,0BAA0B6B,MAC3BC,IACQA,GAAeM,GAAIpG,KAAKkH,2BAA2Bd,GACvDpG,KAAK2B,aAAa,GAEzB,GAET,CACJ,CAEAwF,qBAAAA,GACI,IAAK,IAAIC,KAAWjH,SAASE,iBAAiB,IAAML,KAAKvB,OAAO4I,eAC5DD,EAAQ7E,iBAAiB,SAAUyE,IAC/B,MAAMtE,EAASsE,EAAMtE,OACjBA,GAAQ3C,MAAMuH,mBAAmB5E,EAAOP,QAAQiE,IACpDpG,KAAK2B,aAAa,GAG9B,CAEA4F,YAAAA,GACI,MAAMC,EAAQxH,KAAKqG,2BAEnB,SAASoB,EAAerB,GACpB,MAAMgB,EAAUjH,SAASkE,cAAc,OACvC+C,EAAQ1D,UAAUY,IAAItE,KAAKvB,OAAO4I,eAClCD,EAAQ3B,YAAc,yDACtB2B,EAAQjF,QAAQiE,GAAKA,EACrBpG,KAAKN,aAAaoF,OAAOsC,EAC7B,CACA,SAASM,EAAexB,GACpB,MAAMyB,EAAWxH,SAASkE,cAAc,OACxCsD,EAASjE,UAAUY,IAAItE,KAAKvB,OAAOyH,MACnCyB,EAASnD,UAAY,gBAAgBxE,KAAKvB,OAAO2H,OAAOF,EAAKE,0BAA0BpG,KAAKvB,OAAOmJ,cAAc1B,EAAKlH,aAAawG,2DAAkCxF,KAAKvB,OAAOsI,sDAEhK,QAAbb,EAAK2B,OACLF,EAASjE,UAAUY,IAAItE,KAAKvB,OAAOgI,UACnCkB,EAASnD,UAAY,gBAAgBxE,KAAKvB,OAAO2H,OAAOF,EAAKE,wBAAwBpG,KAAKvB,OAAOqJ,0DAA0D9H,KAAKvB,OAAOmJ,cAAc1B,EAAKlH,aAAawG,2DAAkCxF,KAAKvB,OAAOsI,uDAGzP/G,KAAKN,aAAaoF,OAAO6C,EAC7B,CAnBI3H,KAAKN,eAAcM,KAAKN,aAAa8E,UAAY,IAoBrD,IAAK,IAAIvC,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,MAAMiE,EAAOsB,EAAMxG,MAAMkF,GAAeA,EAAKE,IAAMnE,IAC/CiE,EACAwB,EAAeK,KAAK/H,KAAMkG,GAE1BuB,EAAeM,KAAK/H,KAAMiC,EAElC,CACJ,CAIAoE,wBAAAA,GACI,IAAImB,EAMJ,OALIQ,aAAaC,QAAQ,WAAUT,EAAQU,KAAKC,MAAMH,aAAaC,QAAQ,WACtET,IACDQ,aAAaI,QAAQ,QAAS,MAC9BZ,EAAQ,IAELA,CACX,CAEAF,kBAAAA,CAAmBlB,GACf,MAAMoB,EAAQxH,KAAKqG,2BACfmB,EAAMhC,QAAU,EAChBpH,QAAQiK,KAAK,uaAGZb,EAAMxG,MAAKkF,GAAQA,EAAKE,IAAMA,KAC/BoB,EAAMc,KAAK,CACPlC,GAAIA,EACJyB,KAAM,OACN9I,gBAAiBiB,KAAKjB,gBACtBC,aAAcgB,KAAKhB,aACnBF,KAAMkB,KAAKlB,KAAK,GAChBc,YAAaI,KAAKJ,cAG1BoI,aAAaI,QAAQ,QAASF,KAAKK,UAAUf,IACjD,CAEAgB,aAAAA,GACI,MAAMhB,EAAQxH,KAAKqG,2BACnB,GAAImB,EAAMhC,QAAU,EAEhB,YADApH,QAAQiK,KAAK,saAGjB,IAAIjC,EAAa,EACjB,IAAK,IAAInE,EAAI,EAAGA,GAAK,EAAGA,IACpB,IAAKuF,EAAMxG,MAAMkF,GAAeA,EAAKE,IAAMnE,IAAI,CAC3CmE,EAAKnE,EACL,KACJ,CAECuF,EAAMxG,MAAMkF,GAAeA,EAAKE,IAAMA,MACvCoB,EAAMc,KAAK,CACPlC,GAAIA,EACJyB,KAAM,OACN7I,aAAcgB,KAAKhB,aACnBF,KAAMkB,KAAKlB,KAAK,KAEpBkJ,aAAaI,QAAQ,QAASF,KAAKK,UAAUf,KAEjDxH,KAAK8B,UAAUX,EAAAA,EAAcC,EAAAA,EACjC,CAEA0F,oBAAAA,CAAqBV,GACjBpG,KAAK+D,mBACL,MACMmC,EADQlG,KAAKqG,2BACArF,MAAMkF,GAAeA,EAAKE,IAAMA,IACnDpG,KAAKyI,WAAWvC,EACpB,CAEAwC,iBAAAA,GACIV,aAAaI,QAAQ,QAAS,KAClC,CAEAlB,0BAAAA,CAA2Bd,GACvB,MAAMoB,EAAQxH,KAAKqG,2BACnBmB,EAAMmB,OAAOnB,EAAMoB,WAAW1C,GAAeA,EAAKE,IAAMA,IAAK,GAC7D4B,aAAaI,QAAQ,QAASF,KAAKK,UAAUf,GACjD,CAEAiB,UAAAA,CAAWI,GAAiB,IAADC,EAMvB,GALInC,SAAyB,QAAjBmC,EAAAnC,OAAOoC,kBAAU,IAAAD,GAAjBA,EAAmBpF,UAAUY,IAAI,SACzCqC,QAAQA,OAAO5C,mBACnB/D,KAAKgJ,kBACLhJ,KAAKhB,aAAe,GACpBgB,KAAKiJ,kBAAkBJ,EAAS/J,MAC5B+J,EAAU,CACV7I,KAAKJ,YAAciJ,EAASjJ,YAC5BI,KAAK6B,iBACL,IAAK,IAAIqH,KAAaL,EAAS7J,aAC3BgB,KAAKmJ,gBAAgBD,GAEzB,IAAK,IAAIE,KAAYP,EAAS9J,gBAAiB,CAC3C,MAAMkC,EAAS4H,EAAS9J,gBAAgBqK,GACpB,SAAhBnI,EAAOkC,MACPnD,KAAKZ,oBAAoB6B,EAAOM,KAAM6H,GAEtCpJ,KAAKX,oBAAoB4B,EAAOM,KAAM6H,EAE9C,CACJ,CACJ,CAEAC,eAAAA,CAAgBpI,EAAgBM,GAC5BN,EAAOqI,eACPtJ,KAAKS,oBAAoBQ,EAAOkC,MAAhCnD,CAAuCuB,EAAMN,EAAOF,OACpDf,KAAK4B,cACT,CAEAD,WAAAA,GACI3B,KAAKuH,eACLvH,KAAK+F,wBACL/F,KAAKmH,wBACLnH,KAAK+E,sBACT,CAEAoE,eAAAA,CAAgBD,GACZlJ,KAAKhB,aAAasJ,KAAKY,GACvB,MAAMK,EAAQpJ,SAASkE,cAAc,OACrCkF,EAAM7F,UAAUY,IAAItE,KAAKvB,OAAO+K,cAChCD,EAAM/E,UAAY,gBAAgBxE,KAAKvB,OAAOgL,YAAYzJ,KAAKhB,aAAawG,0CAC3D0D,EAAUQ,WAAWC,6BAA6B3J,KAAKvB,OAAOmL,aAAa5J,KAAKvB,OAAOyK,EAAU/F,kCACnGnD,KAAKvB,OAAOqE,UAAUoG,EAAUW,QAAQX,EAAUY,iBAC7D9J,KAAKT,aAAaS,KAAKT,YAAYuF,OAAOyE,EAClD,CAEAN,iBAAAA,CAAkB9F,GACD,SAATA,GAA6B,SAATA,IACpBnD,KAAKR,UAAYQ,KAAKR,SAASkE,UAAUC,OAAO3D,KAAKlB,KAAK,IAC1DkB,KAAKlB,KAAK,GAAKqE,EACfnD,KAAKlB,KAAK,GAAKkB,KAAKJ,YAAYI,KAAKlB,KAAK,IAC1CkB,KAAKR,UAAYQ,KAAKR,SAASkE,UAAUY,IAAItE,KAAKlB,KAAK,IACnDkB,KAAKR,WAAUQ,KAAKR,SAASiG,YAAcsE,EAAAA,EAAiB5G,GAAS,IAAInD,KAAKlB,KAAK,OAE/F,CAEA0B,UAAAA,GACI,IAAKR,KAAKR,SAAU,OACpBQ,KAAKR,SAASkE,UAAUC,OAAO3D,KAAKlB,KAAK,IACzC,MAAMqE,EAA0B,UAAjBnD,KAAKlB,KAAK,GAAkB,QAAU,QACrDkB,KAAKR,SAASkE,UAAUY,IAAInB,GAC5BnD,KAAKlB,KAAK,GAAKqE,EACfnD,KAAKlB,KAAK,GAAKkB,KAAKJ,YAAYI,KAAKlB,KAAK,IAC1CkB,KAAKR,SAASiG,YAAcsE,EAAAA,EAAiB5G,GAAS,IAAInD,KAAKlB,KAAK,MAChEkB,KAAKf,eACD+K,SAASA,QAAQtG,UAAUuG,OAAO,OAE9C,CAEAlG,gBAAAA,GACI,GAA2B,GAAvB/D,KAAKnB,QAAQ2G,OAAa,OAC9B,IAAIvD,EAAIjC,KAAKnB,QAAQ2G,OAAS,EAC9B,KAAOvD,GAAK,GAAG,CACX,MAAMhB,EAASjB,KAAKnB,QAAQoD,GAC5BA,IACmB,QAAfhB,EAAOM,KAKXN,EAAOqI,eAJHrI,EAAOqI,aAAa,OAM5B,CACJ,CAEAY,OAAAA,GAAW,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACN,MAAMC,EAAO3K,SAASC,cAAc,gBACpC,IAAK0K,EAAM,OACX9K,KAAKgJ,kBACL8B,EAAKpH,UAAUY,IAAqB,QAAlB6F,EAAY,QAAZC,EAACpK,KAAKvB,cAAM,IAAA2L,OAAA,EAAXA,EAAa9E,YAAI,IAAA6E,EAAAA,EAAI,QAExC,MAAM/F,EAAQjE,SAASkE,cAAc,OACtB,QAAfgG,EAAIrK,KAAKvB,cAAM,IAAA4L,GAAXA,EAAaU,cAAc3G,EAAMV,UAAUY,IAAItE,KAAKvB,OAAOsM,cAE/D3G,EAAMI,UAAY,oJAEAuF,EAAAA,EAAiB/J,KAAKlB,KAAK,oBAG7C,MAAMW,EAAaU,SAASkE,cAAc,OAC1C5E,EAAWiE,UAAUY,IACM,QADHgG,EACT,QADSC,EACpBvK,KAAKvB,cAAM,IAAA8L,OAAA,EAAXA,EAAa9K,kBAAU,IAAA6K,EAAAA,EAAI,aACX,QADuBE,EAC5B,QAD4BC,EACvCzK,KAAKvB,cAAM,IAAAgM,OAAA,EAAXA,EAAa9F,WAAG,IAAA6F,EAAAA,EAAI,OAExB/K,EAAWgG,YAAc,0DACzBhG,EAAW8C,iBAAiB,SAAS,KAAO,IAADyI,EAAAC,EACvClL,MAAM+B,UAAUX,EAAAA,EAAcC,EAAAA,GAC9BgD,EAAMT,SACNmH,EAAKpH,UAAUC,OAAwB,QAAlBqH,EAAY,QAAZC,EAACjL,KAAKvB,cAAM,IAAAwM,OAAA,EAAXA,EAAa3F,YAAI,IAAA0F,EAAAA,EAAI,OAAO,IAGtD,MAAME,EAAmB/K,SAASkE,cAAc,OAChD6G,EAAiBxH,UAAUY,IACM,QADHoG,EACf,QADeC,EAC1B3K,KAAKvB,cAAM,IAAAkM,OAAA,EAAXA,EAAaO,wBAAgB,IAAAR,EAAAA,EAAI,mBACjB,QADmCE,EACxC,QADwCC,EACnD7K,KAAKvB,cAAM,IAAAoM,OAAA,EAAXA,EAAalG,WAAG,IAAAiG,EAAAA,EAAI,OAExBM,EAAiBzF,YAAc,mIAC/ByF,EAAiB3I,iBAAiB,SAAS,KAAO,IAAD4I,EAAAC,EAC7CpL,KAAKwI,gBACLxI,KAAK2B,cACLyC,EAAMT,SACNmH,EAAKpH,UAAUC,OAAwB,QAAlBwH,EAAY,QAAZC,EAACpL,KAAKvB,cAAM,IAAA2M,OAAA,EAAXA,EAAa9F,YAAI,IAAA6F,EAAAA,EAAI,OAAO,IAGtD/G,EAAMU,OAAOrF,EAAYyL,GAErBlB,SAASA,QAAQqB,QAAQjH,GAE7BA,EAAMU,OAAOoG,GACTlB,SAASA,QAAQqB,QAAQjH,EACjC,CAEA3D,mBAAAA,CAAoB0C,GAShB,OARA,SAAsB5B,EAAkBR,GACpC,IAAKuK,OAAOC,KAAKC,EAAAA,IAAaxI,SAASzB,GAAO,OAC9C,IAAIN,EAIJ,OAHsCA,EAAS,IAAIuK,EAAAA,GAAYjK,GAAM4B,EAAOnD,KAAKH,MAAOG,KAAKvB,QAE7FwC,EAAOO,MAAMT,GAAO,GACbE,CACX,EACoByE,KAAK1F,KAE7B,CAEA4B,YAAAA,GACI,MAAM1C,EAAQ,CACVe,MAAO,GACPC,MAAO,IAEX,IAAI+B,EAAI,EACR,KAAOA,EAAIjC,KAAKnB,QAAQ2G,QAAQ,CAC5B,MAAMvE,EAASjB,KAAKnB,QAAQoD,GAC5BA,IACKhB,EAAOwK,OACQ,SAAhBxK,EAAOkC,MACPjE,EAAMgB,OAASe,EAAOwK,KAEtBvM,EAAMe,OAASgB,EAAOwK,KAE9B,CACAzL,KAAKd,MAAQA,CACjB,CAEA4C,SAAAA,CAAUX,EAA0BC,GAAiC,IAADsK,EAAAC,EAEpDC,EAAAC,EAARlF,SACiB,QAAjBiF,EAAAjF,OAAOoC,kBAAU,IAAA6C,GAAjBA,EAAmBlI,UAAUY,IAAe,QAAZuH,EAAC7L,KAAKvB,cAAM,IAAAoN,OAAA,EAAXA,EAAavG,MAC9CqB,OAAO5C,oBAEXhE,MAAMgE,mBACN/D,KAAKhB,aAAe,GACpBgB,KAAKd,MAAQ,CACTe,MAAO,EACPC,MAAO,GAEX,MAAM8J,EAAU7J,SAASmC,eAAe,WACjC,OAAP0H,QAAO,IAAPA,GAAAA,EAAStG,UAAUC,OAAwB,QAAlB+H,EAAY,QAAZC,EAAC3L,KAAKvB,cAAM,IAAAkN,OAAA,EAAXA,EAAarG,YAAI,IAAAoG,EAAAA,EAAI,QAE/C1L,KAAKkB,gBAAgBC,EAAcC,GACnCpB,KAAKgJ,kBACLhJ,KAAKiJ,kBAAkB,QAC3B,CAEAD,eAAAA,GACQhJ,KAAKT,cAAaS,KAAKT,YAAYiF,UAAY,GACvD,E","sources":["components/Chess/script.ts"],"sourcesContent":["\"use strict\";\r\nimport { whiteFigures, blackFigures } from './games/classic/index.ts';\r\n\r\nimport { Review } from './review.ts';\r\n\r\nimport { Figure } from \"./figures/Figure\";\r\n\r\nimport { Color, LETTERS, colorTextRussian } from './constants/index.ts';\r\n\r\nimport {\r\n    figureTypes\r\n} from './figures/index.ts';\r\n\r\nimport { figureType, HistoryPoint, Save } from './types.ts';\r\nimport clsx from 'clsx';\r\nimport { GlobalContext } from '../../App.js';\r\n\r\nconsole.log('start script with Board 17-09');\r\n\r\nexport class Board {\r\n    globalState: unknown\r\n    setGlobalState: unknown\r\n\r\n    enemyHighlight: Boolean;\r\n    figures: Figure[];\r\n    turn: [Color, string];\r\n    figurePositions: object;\r\n    movesHistory: HistoryPoint[]\r\n    boardFlipMode: boolean;\r\n    score: { white: number, black: number };\r\n\r\n    activeFigure: Figure | null\r\n\r\n    styles: Record<string, string> | undefined;\r\n\r\n    placeNewWhiteFigure: (type: string, coord: string) => ((type: figureType, coord: string) => Figure);\r\n    placeNewBlackFigure: (type: string, coord: string) => ((type: figureType, coord: string) => Figure);\r\n\r\n    chessDesk: HTMLDivElement | null;\r\n    historyHTML: HTMLDivElement | null;\r\n    turnSpan: HTMLDivElement | null;\r\n    newGameBtn: HTMLDivElement | null;\r\n    saveListHTML: HTMLDivElement | null;\r\n    players: NodeListOf<HTMLDivElement>\r\n\r\n    playerNames: { white: string, black: string };\r\n\r\n    cages: HTMLDivElement[]\r\n\r\n    constructor({ styles, globalState }: { styles?: Record<string, string>, globalState?: object }) {\r\n        window.state = this;\r\n\r\n        this.globalState = globalState?.globalState;\r\n        this.setGlobalState = globalState?.setGlobalState;\r\n\r\n        this.enemyHighlight = false;\r\n        this.figures = [];\r\n        this.turn = ['black', ''];\r\n        this.figurePositions = {};\r\n        this.movesHistory = [];\r\n        this.boardFlipMode = false;\r\n        this.score = {\r\n            white: 39,\r\n            black: 39\r\n        }\r\n\r\n        this.activeFigure = null;\r\n\r\n        this.styles = styles || {};\r\n\r\n        this.chessDesk = document.querySelector('#chessDesk');\r\n        this.historyHTML = document.querySelector('#history')\r\n        this.turnSpan = document.querySelector('.turnSpan');\r\n        this.newGameBtn = document.querySelector('.newGameBtn')\r\n        this.saveListHTML = document.querySelector('.saves')\r\n        this.players = document.querySelectorAll('.' + this.styles.player);\r\n\r\n        this.playerNames = {\r\n            white: 'player1',\r\n            black: 'player2'\r\n        }\r\n        this.playerNames.white = this.globalState.userName\r\n\r\n        this.turn[1] = this.playerNames[this.turn[0]]\r\n        this.changeTurn()\r\n\r\n        this.placeNewWhiteFigure = this.addNewFigureFactory(\"white\");\r\n        this.placeNewBlackFigure = this.addNewFigureFactory(\"black\");\r\n\r\n\r\n        if (!this.chessDesk) {\r\n            throw new Error('Не хватает хтмл-элменто в ДОМ для запуска скрипта')\r\n        }\r\n        this.cages = Array.from(this.chessDesk.querySelectorAll('.chessDeskCage'));\r\n\r\n        this.initBoard()\r\n    }\r\n\r\n    public getFigureByCoord(coord: string): Figure | undefined {\r\n        const figure = this.figures.find(figure => figure.coord == coord)\r\n        return figure\r\n    }\r\n\r\n    placeAllFigures(whiteFigures, blackFigures) {\r\n        whiteFigures.forEach(([type, place]) => {\r\n            this.placeNewWhiteFigure(type, place)\r\n        })\r\n        blackFigures.forEach(([type, place]) => {\r\n            this.placeNewBlackFigure(type, place)\r\n        })\r\n    }\r\n\r\n    public startBoard() {\r\n        this.refreshMenu()\r\n        \r\n        this.refreshScore()\r\n        this.refreshPlayers()\r\n        this.startGame(whiteFigures, blackFigures)\r\n    }\r\n\r\n    private initBoard() {\r\n        let count = 0\r\n        for (let i = 8; i > 0; i--) {\r\n            for (let j = 0; j < 8; j++) {\r\n                this.cages[count].dataset.cageName = LETTERS[j] + i;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        document.getElementById('chessDesk')?.addEventListener('click', (e) => {\r\n            const cageHTML = e.target.closest('.' + this.styles.chessDeskCage)\r\n            const coord = cageHTML?.dataset.cageName;\r\n            const figure = this.activeFigure\r\n\r\n            if (!coord || !figure) return\r\n\r\n            const move = figure.moves.find(move => move['coord'] === coord);\r\n            if (move && figure.isActive && this.figures.includes(figure)) {\r\n                if (move.type === 'move' || move.type === 'castling') {\r\n                    if (move.type === 'castling') {\r\n                        const isShortCastling = coord[0] === \"g\";\r\n                        const num = figure.color === \"white\" ? 1 : 8;\r\n                        let [letter, newLetter] = isShortCastling ? ['h', 'f'] : ['a', 'd'];\r\n                        const rookCoord = letter + num;\r\n                        const foundedRook = this.figures.find(obj => obj.coord === rookCoord && !obj.wasMoved)\r\n                        if (!foundedRook) return\r\n                        foundedRook.place(newLetter + num);\r\n                    }\r\n                    figure.place(coord)\r\n                    figure.figure.classList.remove('active')\r\n                    figure.isActive = false;\r\n                    this.activeFigure = null\r\n\r\n                    this.changeTurn()\r\n                    this.chessDesk.removeEventListener('click', move);\r\n                }\r\n            }\r\n        })\r\n\r\n        this.addHandlersToNewGameBtn()\r\n    }\r\n\r\n    public destroyBoard() {\r\n        console.log('destroy board 2');\r\n        this.refreshMenu()\r\n        this.refreshScore()\r\n        this.refreshPlayers()\r\n        this.removeAllFigures()\r\n        // document.getElementById('chessDesk')?.removeEventListener()\r\n    }\r\n\r\n    invokeConfirmationModal() {\r\n        return new Promise((resolve, reject) => {\r\n            const modal = document.createElement('div')\r\n\r\n            modal.classList.add(this.styles.confirmModal)\r\n            modal.innerHTML = `\r\n            <h3>Подтвердить?</h3>\r\n            <div class=\"${this.styles.confirmAnswers}\">\r\n            <div class=\"${this.styles.yesBtn} ${this.styles.btn}\">Да</div><div class=\"${this.styles.noBtn} ${this.styles.btn}\">Нет</div>\r\n            </div>\r\n            `\r\n            const yesBtn = modal.querySelector('.' + this.styles.yesBtn)\r\n            const noBtn = modal.querySelector('.' + this.styles.noBtn)\r\n\r\n            document.body.append(modal)\r\n\r\n            yesBtn && yesBtn.addEventListener('click', () => {\r\n                resolve(true);\r\n                modal.remove()\r\n            });\r\n            noBtn && noBtn.addEventListener('click', () => {\r\n                resolve(false);\r\n                modal.remove()\r\n            });\r\n        })\r\n    }\r\n\r\n    addHandlersToPlayers() {\r\n        if (this.players) for (let player of this.players) {\r\n            const enterName = player.querySelector('.enterNewName')\r\n            const nameInput: HTMLInputElement | null = player.querySelector('.nameInput')\r\n            const nameDiv = player.querySelector('.name')\r\n\r\n            const changeBtn = player.querySelector('.changeBtn')\r\n            const exitBtn = player.querySelector('.exitBtn')\r\n\r\n            function exit() {\r\n                enterName && enterName.classList.remove(this.styles.hide);\r\n                nameInput && nameInput.classList.add(this.styles.hide);\r\n                changeBtn && changeBtn.classList.add(this.styles.hide);\r\n                exitBtn && exitBtn.classList.add(this.styles.hide);\r\n                if (nameInput) nameInput.value = '';\r\n            }\r\n\r\n            if (enterName) enterName.addEventListener('click', () => {\r\n                enterName.classList.add(this.styles.hide)\r\n                nameInput && nameInput.classList.remove(this.styles.hide)\r\n                changeBtn && changeBtn.classList.remove(this.styles.hide)\r\n                exitBtn && exitBtn.classList.remove(this.styles.hide)\r\n                changeBtn && changeBtn.addEventListener('click', () => {\r\n                    if (nameInput && nameInput.value.length > 0) {\r\n                        if (nameDiv) nameDiv.textContent = nameInput.value\r\n                        this.playerNames[player.classList[1]] = nameInput.value\r\n                        exit.bind(this)()\r\n                    }\r\n                })\r\n                if (exitBtn) exitBtn.addEventListener('click', exit.bind(this))\r\n            })\r\n        }\r\n    }\r\n\r\n    clearNames() {\r\n        for (let player of this.players) {\r\n            const nameDiv = player.querySelector('.name');\r\n            if (nameDiv) nameDiv.textContent = '';\r\n        }\r\n    }\r\n\r\n    refreshPlayers() {\r\n        for (let player of this.players) {\r\n            const color = player.classList[1].split('_')[1] // style_[color]_hash -> [color]\r\n            const nameDiv = player.querySelector('.name')\r\n            if (nameDiv) nameDiv.textContent = this.playerNames[color]\r\n            const score = player.querySelector('.score')\r\n            if (score) score.textContent = this.score[color]\r\n\r\n        }\r\n    }\r\n\r\n    addHandlersToNewGameBtn() {\r\n        this.newGameBtn && this.newGameBtn.addEventListener('click', () => {\r\n            this.invokeConfirmationModal().then(\r\n                isConfirmed => {\r\n                    if (isConfirmed) this.startGame(whiteFigures, blackFigures)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    addHandlersToLoadBtns() {\r\n        if (this.saveListHTML) for (let loadBtn of this.saveListHTML.querySelectorAll('.' + this.styles?.save)) {\r\n            if (!loadBtn) return\r\n            const id = loadBtn.querySelector('.' + this.styles.id)!.textContent\r\n            const save = this.getSavesFromLocalStorage().find(save => save.id == id)\r\n            loadBtn.addEventListener('click', () => {\r\n                this.invokeConfirmationModal().then(\r\n                    isConfirmed => {\r\n                        if (isConfirmed) {\r\n                            if (loadBtn.classList.contains(this.styles?.readOnly ?? 'readOnly')) {\r\n                                const gameLog = {\r\n                                    whiteFigures,\r\n                                    blackFigures,\r\n                                    movesHistory: save.movesHistory\r\n                                }\r\n                                review.removeAllFigures()\r\n                                review = new Review(gameLog.movesHistory, gameLog.whiteFigures, gameLog.blackFigures, this.styles);\r\n                                review.startReview()\r\n                                return\r\n                            }\r\n                            if (id) this.loadFromLocalStorage(id)\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n            loadBtn.querySelector('.' + this.styles.deleteSaveBtn)?.addEventListener('click', (event) => {\r\n                event.stopPropagation()\r\n                this.invokeConfirmationModal().then(\r\n                    isConfirmed => {\r\n                        if (isConfirmed && id) this.removeSaveFromLocalStorage(id)\r\n                        this.refreshMenu()\r\n                    }\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    addHandlersToSaveBtns() {\r\n        for (let saveBtn of document.querySelectorAll('.' + this.styles.emptySaveCage)) {\r\n            saveBtn.addEventListener('click', (event) => {\r\n                const target = event.target as HTMLDivElement\r\n                if (target) state.saveToLocalStorage(target.dataset.id)\r\n                this.refreshMenu()\r\n            })\r\n        }\r\n    }\r\n\r\n    displaySaves() {\r\n        const saves = this.getSavesFromLocalStorage()\r\n        if (this.saveListHTML) this.saveListHTML.innerHTML = '';\r\n        function displaySaveBtn(id: string) {\r\n            const saveBtn = document.createElement('div')\r\n            saveBtn.classList.add(this.styles.emptySaveCage)\r\n            saveBtn.textContent = 'Сохранить'\r\n            saveBtn.dataset.id = id\r\n            this.saveListHTML.append(saveBtn)\r\n        }\r\n        function displayLoadBtn(save: Save) {\r\n            const saveHTML = document.createElement('div');\r\n            saveHTML.classList.add(this.styles.save);\r\n            saveHTML.innerHTML = `<span class=\"${this.styles.id}\">${save.id}</span> <span class=\"${this.styles.moveCount}\">${save.movesHistory.length} ходов</span><div class=\"${this.styles.deleteSaveBtn}\"><img src=\"img/deleteIcon.png\"></div>`\r\n\r\n            if (save.mode == 'read') {\r\n                saveHTML.classList.add(this.styles.readOnly)\r\n                saveHTML.innerHTML = `<span class=\"${this.styles.id}\">${save.id}</span><img class=\"${this.styles.readOnlyIcon}\" src=\"img/readOnlyIcon.png\"> <span class=\"${this.styles.moveCount}\">${save.movesHistory.length} ходов</span><div class=\"${this.styles.deleteSaveBtn}\"><img src=\"img/deleteIcon.png\"></div>`\r\n            }\r\n\r\n            this.saveListHTML.append(saveHTML)\r\n        }\r\n        for (let i = 1; i <= 4; i++) {\r\n            const save = saves.find((save: Save) => save.id == i)\r\n            if (save) {\r\n                displayLoadBtn.call(this, save)\r\n            } else {\r\n                displaySaveBtn.call(this, i)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getSavesFromLocalStorage() {\r\n        let saves;\r\n        if (localStorage.getItem('saves')) saves = JSON.parse(localStorage.getItem('saves')!)\r\n        if (!saves) {\r\n            localStorage.setItem('saves', '[]')\r\n            saves = []\r\n        }\r\n        return saves\r\n    }\r\n\r\n    saveToLocalStorage(id: number) {\r\n        const saves = this.getSavesFromLocalStorage()\r\n        if (saves.length >= 4) {\r\n            console.warn('Максимальное количество сохранений. Удалите одно сохранение, чтобы продолжить!');\r\n            return\r\n        }\r\n        if (!saves.find(save => save.id == id)) {\r\n            saves.push({\r\n                id: id,\r\n                mode: 'game',\r\n                figurePositions: this.figurePositions,\r\n                movesHistory: this.movesHistory,\r\n                turn: this.turn[0],\r\n                playerNames: this.playerNames\r\n            })\r\n        }\r\n        localStorage.setItem('saves', JSON.stringify(saves))\r\n    }\r\n\r\n    saveForReview() {\r\n        const saves = this.getSavesFromLocalStorage()\r\n        if (saves.length >= 4) {\r\n            console.warn('Максимальное количество сохранений. Удалите одно сохранение, чтобы продолжить!');\r\n            return\r\n        }\r\n        let id: number = 0;\r\n        for (let i = 1; i <= 4; i++) {\r\n            if (!saves.find((save: Save) => save.id == i)) {\r\n                id = i\r\n                break\r\n            }\r\n        }\r\n        if (!saves.find((save: Save) => save.id == id)) {\r\n            saves.push({\r\n                id: id,\r\n                mode: 'read',\r\n                movesHistory: this.movesHistory,\r\n                turn: this.turn[0]\r\n            })\r\n            localStorage.setItem('saves', JSON.stringify(saves))\r\n        }\r\n        this.startGame(whiteFigures, blackFigures)\r\n    }\r\n\r\n    loadFromLocalStorage(id: number | string) {\r\n        this.removeAllFigures()\r\n        const saves = this.getSavesFromLocalStorage()\r\n        const save = saves.find((save: Save) => save.id == id)\r\n        this.applyState(save)\r\n    }\r\n\r\n    cleanLocalStorage() {\r\n        localStorage.setItem('saves', '[]')\r\n    }\r\n\r\n    removeSaveFromLocalStorage(id: number | string) {\r\n        const saves = this.getSavesFromLocalStorage()\r\n        saves.splice(saves.findIndex((save: Save) => save.id == id), 1)\r\n        localStorage.setItem('saves', JSON.stringify(saves))\r\n    }\r\n\r\n    applyState(newState: Save) {\r\n        if (review) review.reviewBtns?.classList.add('hide')\r\n        if (review) review.removeAllFigures()\r\n        this.cleanHistoyHTML()\r\n        this.movesHistory = []\r\n        this.changeTurnToColor(newState.turn)\r\n        if (newState) {\r\n            this.playerNames = newState.playerNames\r\n            this.refreshPlayers()\r\n            for (let pointData of newState.movesHistory) {\r\n                this.addHistoryPoint(pointData)\r\n            }\r\n            for (let position in newState.figurePositions) {\r\n                const figure = newState.figurePositions[position]\r\n                if (figure.color == 'white') {\r\n                    this.placeNewWhiteFigure(figure.type, position)\r\n                } else {\r\n                    this.placeNewBlackFigure(figure.type, position)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    transformFigure(figure: Figure, type: figureType) {\r\n        figure.deleteFigure()\r\n        this.addNewFigureFactory(figure.color)(type, figure.coord)\r\n        this.refreshScore()\r\n    }\r\n\r\n    refreshMenu() {\r\n        this.displaySaves()\r\n        this.addHandlersToLoadBtns()\r\n        this.addHandlersToSaveBtns()\r\n        this.addHandlersToPlayers()\r\n    }\r\n\r\n    addHistoryPoint(pointData: HistoryPoint) {\r\n        this.movesHistory.push(pointData)\r\n        const point = document.createElement('div')\r\n        point.classList.add(this.styles.historyPoint)\r\n        point.innerHTML = `<span class=\"${this.styles.moveNum}\">${this.movesHistory.length}.</span>\r\n        <img src=\"/img/${pointData.figureType.toLowerCase()}.png\" class=\"${this.styles.figureImg} ${this.styles[pointData.color]}\">\r\n        <span class=\"${this.styles.moves}\">${pointData.prev}-${pointData.current}</span>`\r\n        if (this.historyHTML) this.historyHTML.append(point)\r\n    }\r\n\r\n    changeTurnToColor(color: Color) {\r\n        if (color == 'white' || color == 'black') {\r\n            this.turnSpan && this.turnSpan.classList.remove(this.turn[0]);\r\n            this.turn[0] = color\r\n            this.turn[1] = this.playerNames[this.turn[0]]\r\n            this.turnSpan && this.turnSpan.classList.add(this.turn[0]);\r\n            if (this.turnSpan) this.turnSpan.textContent = colorTextRussian[color] + `(${this.turn[1]})`;\r\n        }\r\n    }\r\n\r\n    changeTurn() {\r\n        if (!this.turnSpan) return\r\n        this.turnSpan.classList.remove(this.turn[0]);\r\n        const color = (this.turn[0] === 'white') ? 'black' : 'white'\r\n        this.turnSpan.classList.add(color);\r\n        this.turn[0] = color;\r\n        this.turn[1] = this.playerNames[this.turn[0]]\r\n        this.turnSpan.textContent = colorTextRussian[color] + `(${this.turn[1]})`;\r\n        if (this.boardFlipMode) {\r\n            if (content) content.classList.toggle('flip')\r\n        }\r\n    }\r\n\r\n    removeAllFigures() {\r\n        if (this.figures.length == 0) return\r\n        let i = this.figures.length - 1;\r\n        while (i >= 0) {\r\n            const figure = this.figures[i];\r\n            i--\r\n            if (figure.type == 'King') {\r\n                figure.deleteFigure('init')\r\n                continue\r\n            }\r\n\r\n            figure.deleteFigure()\r\n\r\n        }\r\n    }\r\n\r\n    endGame() {\r\n        const game = document.querySelector('.gameWrapper')\r\n        if (!game) return\r\n        this.cleanHistoyHTML()\r\n        game.classList.add(this.styles?.hide ?? 'hide');\r\n\r\n        const modal = document.createElement('div');\r\n        if (this.styles?.endGameModal) modal.classList.add(this.styles.endGameModal);\r\n\r\n        modal.innerHTML = `\r\n            <h3>Конец игры!</h3>\r\n            <p>Победили ${colorTextRussian[this.turn[0]]}</p>\r\n        `;\r\n\r\n        const newGameBtn = document.createElement('div');\r\n        newGameBtn.classList.add(\r\n            this.styles?.newGameBtn ?? 'newGameBtn',\r\n            this.styles?.btn ?? 'btn'\r\n        );\r\n        newGameBtn.textContent = 'Новая игра';\r\n        newGameBtn.addEventListener('click', () => {\r\n            state.startGame(whiteFigures, blackFigures);\r\n            modal.remove();\r\n            game.classList.remove(this.styles?.hide ?? 'hide');\r\n        });\r\n\r\n        const saveForReviewBtn = document.createElement('div');\r\n        saveForReviewBtn.classList.add(\r\n            this.styles?.saveForReviewBtn ?? 'saveForReviewBtn',\r\n            this.styles?.btn ?? 'btn'\r\n        );\r\n        saveForReviewBtn.textContent = 'Сохранить для просмотра';\r\n        saveForReviewBtn.addEventListener('click', () => {\r\n            this.saveForReview();\r\n            this.refreshMenu();\r\n            modal.remove();\r\n            game.classList.remove(this.styles?.hide ?? 'hide');\r\n        });\r\n\r\n        modal.append(newGameBtn, saveForReviewBtn);\r\n\r\n        if (content) content.prepend(modal);\r\n\r\n        modal.append(saveForReviewBtn)\r\n        if (content) content.prepend(modal)\r\n    }\r\n\r\n    addNewFigureFactory(color: Color) {\r\n        function addNewFigure(type: figureType, coord: string) {\r\n            if (!Object.keys(figureTypes).includes(type)) return\r\n            let figure: Figure;\r\n            if (type == 'King' || type == 'Pawn') figure = new figureTypes[type](color, this.cages, this.styles)\r\n            else figure = new figureTypes[type](color, this.cages, this.styles);\r\n            figure.place(coord, true);\r\n            return figure;\r\n        }\r\n        return addNewFigure.bind(this)\r\n\r\n    }\r\n\r\n    refreshScore() {\r\n        const score = {\r\n            white: 39,\r\n            black: 39\r\n        }\r\n        let i = 0\r\n        while (i < this.figures.length) {\r\n            const figure = this.figures[i]\r\n            i++\r\n            if (!figure.cost) continue\r\n            if (figure.color == 'white') {\r\n                score.black -= figure.cost\r\n            } else {\r\n                score.white -= figure.cost\r\n            }\r\n        }\r\n        this.score = score\r\n    }\r\n\r\n    startGame(whiteFigures: string[][], blackFigures: string[][]): void {\r\n        // TODO: может чреез this?\r\n        if (review) {\r\n            review.reviewBtns?.classList.add(this.styles?.hide);\r\n            review.removeAllFigures();\r\n        }\r\n        state.removeAllFigures()\r\n        this.movesHistory = []\r\n        this.score = {\r\n            white: 0,\r\n            black: 0\r\n        }\r\n        const content = document.getElementById('content')\r\n        content?.classList.remove(this.styles?.hide ?? 'hide')\r\n\r\n        this.placeAllFigures(whiteFigures, blackFigures)\r\n        this.cleanHistoyHTML()\r\n        this.changeTurnToColor('white')\r\n    }\r\n\r\n    cleanHistoyHTML() {\r\n        if (this.historyHTML) this.historyHTML.innerHTML = ''\r\n    }\r\n}\r\n\r\n\r\n\r\n// TODO:\r\n\r\n// MVP - minimal valuable product\r\n\r\n// 1. Поискать в интернете статьи на эту тему\r\n// 2. Пойти к тому, кто уже знает\r\n// 3. Найти тематический чат в телеграмме\r\n// 4. Пойти на консультацию к ГПТ\r\n\r\n\r\n// Stage / Version 1.0.0 (MVP)\r\n// 0. Почитать про сервер для игры (веб-сервер, возможно рестАпи)\r\n// 1. Несколько игроков играют в \"комнатах\".\r\n// 1.5. Заменить стейт с атрибута window на GlobalContext из реакта.\r\n// 2. Совместить часть сервера и клиента -> онлайн + клиент на реакте - подумать еще\r\n// 3. Доделать функционал сервера для игры в шакхматы:\r\n// 3.1. При заходе второго игрока к первому загружать состояние игры с сервера(и сохранять состояние на сервер первого игрока)\r\n// 3.2. ??\r\n// 4. Доделать функционал клиента для игры вдвоем.\r\n// 4.1. Каждый игрок управляет только своим цветом\r\n// 5*. Сделать чат в окне игры (и возможно общий в главном меню)\r\n// 2. Super Простая БД в json\r\n\r\n\r\n// Stage / Version 2.0.0\r\n// 1*. Сделать общий чат в главном меню\r\n// 4. Взятие на проходе\r\n// 6. Добавить опцию \"показывать подсказки фигур противника при наведении\"\r\n// 7. При взятии фигуры в руку - создавать под курсором копию взятой фигуры и сделать возможность drag and drop этой фигуры в рамках поля\r\n// 3. Обычная бд на SQL lite (возможно не обязательно)\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Stage / Version 3.0.0\r\n// 1*. Сделать режим прсмотра игры в реальном времени\r\n// 4. База на Постгри или Монге\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["console","log","Board","constructor","_ref","styles","globalState","setGlobalState","enemyHighlight","figures","turn","figurePositions","movesHistory","boardFlipMode","score","activeFigure","placeNewWhiteFigure","placeNewBlackFigure","chessDesk","historyHTML","turnSpan","newGameBtn","saveListHTML","players","playerNames","cages","window","state","this","white","black","document","querySelector","querySelectorAll","player","userName","changeTurn","addNewFigureFactory","Error","Array","from","initBoard","getFigureByCoord","coord","find","figure","placeAllFigures","whiteFigures","blackFigures","forEach","_ref2","type","place","_ref3","startBoard","refreshMenu","refreshScore","refreshPlayers","startGame","_document$getElementB","count","i","j","dataset","cageName","LETTERS","getElementById","addEventListener","e","cageHTML","target","closest","chessDeskCage","move","moves","isActive","includes","isShortCastling","num","color","letter","newLetter","rookCoord","foundedRook","obj","wasMoved","classList","remove","removeEventListener","addHandlersToNewGameBtn","destroyBoard","removeAllFigures","invokeConfirmationModal","Promise","resolve","reject","modal","createElement","add","confirmModal","innerHTML","confirmAnswers","yesBtn","btn","noBtn","body","append","addHandlersToPlayers","enterName","nameInput","nameDiv","changeBtn","exitBtn","exit","hide","value","length","textContent","bind","clearNames","split","then","isConfirmed","addHandlersToLoadBtns","loadBtn","_this$styles","save","_loadBtn$querySelecto","id","getSavesFromLocalStorage","_this$styles$readOnly","_this$styles2","contains","readOnly","gameLog","review","Review","startReview","loadFromLocalStorage","deleteSaveBtn","event","stopPropagation","removeSaveFromLocalStorage","addHandlersToSaveBtns","saveBtn","emptySaveCage","saveToLocalStorage","displaySaves","saves","displaySaveBtn","displayLoadBtn","saveHTML","moveCount","mode","readOnlyIcon","call","localStorage","getItem","JSON","parse","setItem","warn","push","stringify","saveForReview","applyState","cleanLocalStorage","splice","findIndex","newState","_review$reviewBtns","reviewBtns","cleanHistoyHTML","changeTurnToColor","pointData","addHistoryPoint","position","transformFigure","deleteFigure","point","historyPoint","moveNum","figureType","toLowerCase","figureImg","prev","current","colorTextRussian","content","toggle","endGame","_this$styles$hide","_this$styles3","_this$styles4","_this$styles$newGameB","_this$styles5","_this$styles$btn","_this$styles6","_this$styles$saveForR","_this$styles8","_this$styles$btn2","_this$styles9","game","endGameModal","_this$styles$hide2","_this$styles7","saveForReviewBtn","_this$styles$hide3","_this$styles10","prepend","Object","keys","figureTypes","cost","_this$styles$hide4","_this$styles12","_review$reviewBtns2","_this$styles11"],"sourceRoot":""}